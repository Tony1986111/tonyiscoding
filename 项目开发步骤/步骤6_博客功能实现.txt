# 步骤6：博客功能实现

## 创建Markdown博客系统

1. 安装必要的依赖：
   ```bash
   npm install gray-matter remark remark-html date-fns
   ```

2. 在 `src/lib` 目录下创建 `markdown.js` 文件：
   ```javascript
   import fs from 'fs';
   import path from 'path';
   import matter from 'gray-matter';
   import { remark } from 'remark';
   import html from 'remark-html';

   const postsDirectory = path.join(process.cwd(), 'src/data/posts');

   export function getSortedPostsData() {
     // 获取 /posts 目录下的所有文件名
     const fileNames = fs.readdirSync(postsDirectory);
     const allPostsData = fileNames.map((fileName) => {
       // 移除文件名中的 ".md" 以获取 id
       const id = fileName.replace(/\.md$/, '');

       // 将 markdown 文件读取为字符串
       const fullPath = path.join(postsDirectory, fileName);
       const fileContents = fs.readFileSync(fullPath, 'utf8');

       // 使用 gray-matter 解析 markdown 文件的元数据部分
       const matterResult = matter(fileContents);

       // 将数据与 id 组合
       return {
         id,
         ...matterResult.data,
       };
     });

     // 按日期排序
     return allPostsData.sort((a, b) => {
       if (a.date < b.date) {
         return 1;
       } else {
         return -1;
       }
     });
   }

   export function getAllPostIds() {
     const fileNames = fs.readdirSync(postsDirectory);
     return fileNames.map((fileName) => {
       return {
         params: {
           slug: fileName.replace(/\.md$/, ''),
         },
       };
     });
   }

   export async function getPostData(slug) {
     const fullPath = path.join(postsDirectory, `${slug}.md`);
     const fileContents = fs.readFileSync(fullPath, 'utf8');

     // 使用 gray-matter 解析 markdown 文件的元数据部分
     const matterResult = matter(fileContents);

     // 使用 remark 将 markdown 转换为 HTML 字符串
     const processedContent = await remark()
       .use(html)
       .process(matterResult.content);
     const contentHtml = processedContent.toString();

     // 将数据与 id 和内容 HTML 组合
     return {
       slug,
       contentHtml,
       ...matterResult.data,
     };
   }
   ```

3. 创建 `src/data/posts` 目录，用于存放 Markdown 格式的博客文章：
   ```bash
   mkdir -p src/data/posts
   ```

4. 创建一个示例博客文章 `src/data/posts/hello-world.md`：
   ```markdown
   ---
   title: '我的第一篇博客文章'
   date: '2024-01-01'
   excerpt: '这是我的个人网站上的第一篇博客文章。'
   tags: ['博客', '个人网站', 'Next.js']
   ---

   # 欢迎来到我的博客

   这是我使用 Next.js 和 Markdown 创建的第一篇博客文章。

   ## 为什么我开始写博客

   写博客可以帮助我：

   1. 记录学习过程
   2. 分享知识和经验
   3. 提高写作和表达能力
   4. 建立个人品牌

   ## 我将写些什么

   我计划写关于以下主题的文章：

   - 编程学习经验
   - 项目开发过程
   - 技术教程和笔记
   - 职业发展思考

   ```

## 更新博客列表页面

1. 更新 `src/app/blog/page.js` 以使用文件系统中的博客文章：
   ```jsx
   import Navbar from '@/components/Navbar';
   import Footer from '@/components/Footer';
   import BlogPostCard from '@/components/BlogPostCard';
   import PageTransition from '@/components/PageTransition';
   
   import { getSortedPostsData } from '@/lib/markdown';
   import { getPersonalInfo } from '@/data/personal';
   
   export default function Blog() {
     const posts = getSortedPostsData();
     const personalInfo = getPersonalInfo();
     
     return (
       <div className="min-h-screen flex flex-col">
         <Navbar />
         <PageTransition>
           <main className="flex-grow max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
             <h1 className="text-3xl font-bold mb-8">我的博客</h1>
             
             {posts.length === 0 ? (
               <p>暂无博客文章</p>
             ) : (
               <div className="grid md:grid-cols-2 gap-8">
                 {posts.map((post) => (
                   <BlogPostCard key={post.id} post={{
                     ...post,
                     slug: post.id,
                   }} />
                 ))}
               </div>
             )}
           </main>
         </PageTransition>
         <Footer personalInfo={personalInfo} />
       </div>
     );
   }
   ```

2. 更新 `src/components/BlogPostCard.jsx` 以适应新的数据结构：
   ```jsx
   'use client';
   
   import Link from 'next/link';
   import { useTheme } from '@/context/ThemeContext';
   import { formatDate } from '@/lib/utils';
   
   export default function BlogPostCard({ post }) {
     const { darkMode } = useTheme();
     
     return (
       <div className="card">
         <div className="p-6">
           <div className="flex justify-between items-center mb-2">
             <h3 className="text-xl font-bold">{post.title}</h3>
             <div className="px-2 py-1 text-xs rounded-full bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100">
               {formatDate(post.date)}
             </div>
           </div>
           <p className="mb-4 text-gray-600 dark:text-gray-300">{post.excerpt}</p>
           <div className="flex flex-wrap gap-2 mb-4">
             {post.tags && post.tags.map((tag) => (
               <span key={tag} className="px-2 py-1 text-xs rounded bg-gray-100 dark:bg-gray-700">
                 {tag}
               </span>
             ))}
           </div>
           <Link href={`/blog/${post.slug}`} className="btn btn-primary">
             阅读更多
           </Link>
         </div>
       </div>
     );
   }
   ```

3. 创建 `src/lib/utils.js` 文件，添加日期格式化函数：
   ```javascript
   import { format, parseISO } from 'date-fns';
   import { zhCN } from 'date-fns/locale';
   
   export function formatDate(dateString) {
     const date = parseISO(dateString);
     return format(date, 'yyyy年MM月dd日', { locale: zhCN });
   }
   ```

## 创建博客文章详情页

1. 更新 `src/app/blog/[slug]/page.js` 以使用文件系统中的博客文章：
   ```jsx
   import Navbar from '@/components/Navbar';
   import Footer from '@/components/Footer';
   import PageTransition from '@/components/PageTransition';
   
   import { getAllPostIds, getPostData } from '@/lib/markdown';
   import { getPersonalInfo } from '@/data/personal';
   import { formatDate } from '@/lib/utils';
   
   // 生成静态路径
   export async function generateStaticParams() {
     const paths = getAllPostIds();
     return paths;
   }
   
   export default async function BlogPost({ params }) {
     const { slug } = params;
     const post = await getPostData(slug);
     const personalInfo = getPersonalInfo();
     
     return (
       <div className="min-h-screen flex flex-col">
         <Navbar />
         <PageTransition>
           <main className="flex-grow max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
             <article>
               <header className="mb-8">
                 <div className="flex flex-wrap gap-2 mb-4">
                   {post.tags && post.tags.map((tag) => (
                     <span key={tag} className="px-2 py-1 text-xs rounded bg-gray-100 dark:bg-gray-800">
                       {tag}
                     </span>
                   ))}
                 </div>
                 <h1 className="text-4xl font-bold mb-2">{post.title}</h1>
                 <div className="text-gray-500 dark:text-gray-400">{formatDate(post.date)}</div>
               </header>
               
               <div className="prose dark:prose-invert max-w-none">
                 <div dangerouslySetInnerHTML={{ __html: post.contentHtml }} />
               </div>
             </article>
           </main>
         </PageTransition>
         <Footer personalInfo={personalInfo} />
       </div>
     );
   }
   ```

## 添加博客搜索和标签筛选功能

1. 创建 `src/components/BlogSearch.jsx` 组件：
   ```jsx
   'use client';
   
   import { useState } from 'react';
   import { Search } from 'lucide-react';
   
   export default function BlogSearch({ onSearch }) {
     const [searchTerm, setSearchTerm] = useState('');
     
     const handleSubmit = (e) => {
       e.preventDefault();
       onSearch(searchTerm);
     };
     
     return (
       <form onSubmit={handleSubmit} className="mb-8">
         <div className="relative">
           <input
             type="text"
             placeholder="搜索文章..."
             value={searchTerm}
             onChange={(e) => setSearchTerm(e.target.value)}
             className="w-full p-3 pl-10 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500"
           />
           <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
             <Search size={18} className="text-gray-400" />
           </div>
         </div>
       </form>
     );
   }
   ```

2. 创建 `src/components/TagFilter.jsx` 组件：
   ```jsx
   'use client';
   
   export default function TagFilter({ tags, selectedTag, onSelectTag }) {
     return (
       <div className="mb-8">
         <h3 className="text-lg font-medium mb-2">标签筛选</h3>
         <div className="flex flex-wrap gap-2">
           <button
             onClick={() => onSelectTag(null)}
             className={`px-3 py-1 rounded-full text-sm ${
               selectedTag === null
                 ? 'bg-blue-500 text-white'
                 : 'bg-gray-200 text-gray-800 dark:bg-gray-700 dark:text-gray-200'
             }`}
           >
             全部
           </button>
           {tags.map((tag) => (
             <button
               key={tag}
               onClick={() => onSelectTag(tag)}
               className={`px-3 py-1 rounded-full text-sm ${
                 selectedTag === tag
                   ? 'bg-blue-500 text-white'
                   : 'bg-gray-200 text-gray-800 dark:bg-gray-700 dark:text-gray-200'
               }`}
             >
               {tag}
             </button>
           ))}
         </div>
       </div>
     );
   }
   ```

3. 更新 `src/app/blog/page.js` 以添加搜索和标签筛选功能：
   ```jsx
   'use client';
   
   import { useState, useEffect } from 'react';
   import Navbar from '@/components/Navbar';
   import Footer from '@/components/Footer';
   import BlogPostCard from '@/components/BlogPostCard';
   import BlogSearch from '@/components/BlogSearch';
   import TagFilter from '@/components/TagFilter';
   import PageTransition from '@/components/PageTransition';
   
   // 注意：由于使用了客户端组件，我们需要在客户端获取数据
   // 这里我们可以使用SWR或React Query，但为了简单起见，我们使用fetch
   
   export default function Blog() {
     const [posts, setPosts] = useState([]);
     const [filteredPosts, setFilteredPosts] = useState([]);
     const [searchTerm, setSearchTerm] = useState('');
     const [selectedTag, setSelectedTag] = useState(null);
     const [allTags, setAllTags] = useState([]);
     const [loading, setLoading] = useState(true);
     
     // 获取所有博客文章
     useEffect(() => {
       async function fetchPosts() {
         try {
           const response = await fetch('/api/posts');
           const data = await response.json();
           setPosts(data);
           setFilteredPosts(data);
           
           // 提取所有唯一标签
           const tags = new Set();
           data.forEach(post => {
             if (post.tags) {
               post.tags.forEach(tag => tags.add(tag));
             }
           });
           setAllTags(Array.from(tags));
           
           setLoading(false);
         } catch (error) {
           console.error('获取博客文章失败:', error);
           setLoading(false);
         }
       }
       
       fetchPosts();
     }, []);
     
     // 处理搜索
     const handleSearch = (term) => {
       setSearchTerm(term);
       filterPosts(term, selectedTag);
     };
     
     // 处理标签筛选
     const handleTagSelect = (tag) => {
       setSelectedTag(tag);
       filterPosts(searchTerm, tag);
     };
     
     // 筛选文章
     const filterPosts = (term, tag) => {
       let filtered = posts;
       
       // 按搜索词筛选
       if (term) {
         const lowerTerm = term.toLowerCase();
         filtered = filtered.filter(post => 
           post.title.toLowerCase().includes(lowerTerm) || 
           post.excerpt.toLowerCase().includes(lowerTerm)
         );
       }
       
       // 按标签筛选
       if (tag) {
         filtered = filtered.filter(post => 
           post.tags && post.tags.includes(tag)
         );
       }
       
       setFilteredPosts(filtered);
     };
     
     return (
       <div className="min-h-screen flex flex-col">
         <Navbar />
         <PageTransition>
           <main className="flex-grow max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
             <h1 className="text-3xl font-bold mb-8">我的博客</h1>
             
             <div className="md:flex md:gap-8">
               <div className="md:w-1/4 mb-8 md:mb-0">
                 <BlogSearch onSearch={handleSearch} />
                 <TagFilter 
                   tags={allTags} 
                   selectedTag={selectedTag} 
                   onSelectTag={handleTagSelect} 
                 />
               </div>
               
               <div className="md:w-3/4">
                 {loading ? (
                   <p>加载中...</p>
                 ) : filteredPosts.length === 0 ? (
                   <p>没有找到符合条件的文章</p>
                 ) : (
                   <div className="grid md:grid-cols-2 gap-8">
                     {filteredPosts.map((post) => (
                       <BlogPostCard key={post.id} post={post} />
                     ))}
                   </div>
                 )}
               </div>
             </div>
           </main>
         </PageTransition>
         <Footer />
       </div>
     );
   }
   ```

4. 创建 API 路由以获取博客文章。创建 `src/app/api/posts/route.js` 文件：
   ```javascript
   import { getSortedPostsData } from '@/lib/markdown';
   import { NextResponse } from 'next/server';
   
   export async function GET() {
     const posts = getSortedPostsData();
     return NextResponse.json(posts);
   }
   ```

## 添加博客评论功能

1. 安装 Giscus（基于 GitHub Discussions 的评论系统）：
   ```bash
   npm install @giscus/react
   ```

2. 创建 `src/components/Comments.jsx` 组件：
   ```jsx
   'use client';
   
   import { useTheme } from '@/context/ThemeContext';
   import Giscus from '@giscus/react';
   
   export default function Comments() {
     const { darkMode } = useTheme();
     
     return (
       <div className="mt-16">
         <h2 className="text-2xl font-bold mb-4">评论</h2>
         <Giscus
           id="comments"
           repo="你的GitHub用户名/仓库名"
           repoId="你的仓库ID"
           category="Announcements"
           categoryId="你的分类ID"
           mapping="pathname"
           reactionsEnabled="1"
           emitMetadata="0"
           inputPosition="top"
           theme={darkMode ? 'dark' : 'light'}
           lang="zh-CN"
           loading="lazy"
         />
       </div>
     );
   }
   ```

3. 在博客文章详情页中添加评论组件：
   ```jsx
   import Comments from '@/components/Comments';
   
   export default async function BlogPost({ params }) {
     // ...
     
     return (
       <div className="min-h-screen flex flex-col">
         <Navbar />
         <PageTransition>
           <main className="flex-grow max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
             <article>
               {/* ... */}
             </article>
             
             <Comments />
           </main>
         </PageTransition>
         <Footer personalInfo={personalInfo} />
       </div>
     );
   }
   ```

完成这些步骤后，你将拥有一个功能完善的博客系统，包括Markdown文章、搜索、标签筛选和评论功能。
