# 步骤5：样式与主题

## 配置Tailwind CSS

1. 确保Tailwind CSS已正确配置。检查 `tailwind.config.js` 文件：
   ```javascript
   /** @type {import('tailwindcss').Config} */
   module.exports = {
     content: [
       './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
       './src/components/**/*.{js,ts,jsx,tsx,mdx}',
       './src/app/**/*.{js,ts,jsx,tsx,mdx}',
     ],
     darkMode: 'class', // 启用类切换的暗黑模式
     theme: {
       extend: {
         colors: {
           // 你可以在这里自定义颜色
           primary: {
             50: '#f0f9ff',
             100: '#e0f2fe',
             200: '#bae6fd',
             300: '#7dd3fc',
             400: '#38bdf8',
             500: '#0ea5e9',
             600: '#0284c7',
             700: '#0369a1',
             800: '#075985',
             900: '#0c4a6e',
           },
         },
         typography: {
           DEFAULT: {
             css: {
               maxWidth: '100%',
             },
           },
         },
       },
     },
     plugins: [
       require('@tailwindcss/typography'), // 添加这个插件以支持博客文章的排版
     ],
   }
   ```

2. 安装 `@tailwindcss/typography` 插件以支持博客文章的排版：
   ```bash
   npm install @tailwindcss/typography
   ```

## 设置全局样式

1. 编辑 `src/app/globals.css` 文件：
   ```css
   @tailwind base;
   @tailwind components;
   @tailwind utilities;
   
   /* 自定义全局样式 */
   @layer base {
     body {
       @apply antialiased;
     }
   
     /* 暗黑模式样式 */
     .dark body {
       @apply bg-gray-900 text-gray-100;
     }
   
     /* 亮色模式样式 */
     body {
       @apply bg-gray-50 text-gray-900;
     }
   }
   
   /* 自定义组件样式 */
   @layer components {
     .btn {
       @apply px-4 py-2 rounded-lg font-medium transition;
     }
   
     .btn-primary {
       @apply bg-blue-500 text-white hover:bg-blue-600;
     }
   
     .btn-secondary {
       @apply bg-gray-200 text-gray-800 hover:bg-gray-300 dark:bg-gray-800 dark:text-gray-200 dark:hover:bg-gray-700;
     }
   
     .card {
       @apply rounded-xl overflow-hidden shadow-lg transition hover:scale-[1.02] bg-white dark:bg-gray-800;
     }
   
     .section-title {
       @apply text-2xl font-bold mb-8;
     }
   
     .section-divider {
       @apply flex items-center mb-8;
     }
   
     .section-divider::after {
       @apply flex-grow ml-4 h-px bg-gray-200 dark:bg-gray-800;
       content: '';
     }
   }
   
   /* 动画 */
   @keyframes fadeIn {
     from {
       opacity: 0;
       transform: translateY(10px);
     }
     to {
       opacity: 1;
       transform: translateY(0);
     }
   }
   
   .animate-fadeIn {
     animation: fadeIn 0.5s ease-out forwards;
   }
   ```

## 创建主题切换功能

1. 更新 `src/context/ThemeContext.jsx` 以确保暗黑模式正确应用：
   ```jsx
   'use client';
   
   import { createContext, useState, useContext, useEffect } from 'react';
   
   const ThemeContext = createContext();
   
   export function ThemeProvider({ children }) {
     const [darkMode, setDarkMode] = useState(true);
     const [mounted, setMounted] = useState(false);
     
     // 在客户端挂载后检查用户偏好
     useEffect(() => {
       setMounted(true);
       const savedTheme = localStorage.getItem('theme');
       if (savedTheme) {
         setDarkMode(savedTheme === 'dark');
       } else {
         // 检查系统偏好
         const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
         setDarkMode(prefersDark);
       }
     }, []);
     
     // 保存用户偏好并应用类
     useEffect(() => {
       if (mounted) {
         localStorage.setItem('theme', darkMode ? 'dark' : 'light');
         if (darkMode) {
           document.documentElement.classList.add('dark');
         } else {
           document.documentElement.classList.remove('dark');
         }
       }
     }, [darkMode, mounted]);
     
     const toggleDarkMode = () => setDarkMode(!darkMode);
     
     // 提供一个值，指示主题是否已加载
     // 这可以防止在客户端挂载前显示错误的主题
     const value = {
       darkMode,
       toggleDarkMode,
       mounted
     };
     
     return (
       <ThemeContext.Provider value={value}>
         {children}
       </ThemeContext.Provider>
     );
   }
   
   export function useTheme() {
     return useContext(ThemeContext);
   }
   ```

2. 创建一个主题切换按钮组件 `src/components/ThemeToggle.jsx`：
   ```jsx
   'use client';
   
   import { useTheme } from '@/context/ThemeContext';
   import { Moon, Sun } from 'lucide-react';
   
   export default function ThemeToggle() {
     const { darkMode, toggleDarkMode, mounted } = useTheme();
     
     // 在客户端挂载前渲染一个占位符
     if (!mounted) {
       return <div className="w-9 h-9"></div>;
     }
     
     return (
       <button
         onClick={toggleDarkMode}
         className="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-800 transition"
         aria-label={darkMode ? '切换到亮色模式' : '切换到暗黑模式'}
       >
         {darkMode ? <Sun size={20} /> : <Moon size={20} />}
       </button>
     );
   }
   ```

3. 在 `Navbar.jsx` 中使用这个组件：
   ```jsx
   import ThemeToggle from './ThemeToggle';
   
   export default function Navbar() {
     // 移除本地的darkMode状态
     const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
     const toggleMobileMenu = () => setMobileMenuOpen(!mobileMenuOpen);
     
     return (
       <nav className="fixed w-full z-10 bg-gray-50 dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800">
         {/* ... */}
         <div className="hidden md:flex items-center space-x-8">
           {/* ... */}
           <ThemeToggle />
         </div>
         
         <div className="md:hidden flex items-center">
           <ThemeToggle />
           <button onClick={toggleMobileMenu} className="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-800 transition">
             {mobileMenuOpen ? <X size={24} /> : <Menu size={24} />}
           </button>
         </div>
         {/* ... */}
       </nav>
     );
   }
   ```

## 添加响应式设计

1. 确保所有组件都使用Tailwind的响应式类：
   - `sm:` - 640px及以上
   - `md:` - 768px及以上
   - `lg:` - 1024px及以上
   - `xl:` - 1280px及以上
   - `2xl:` - 1536px及以上

2. 更新 `Hero.jsx` 组件以确保在移动设备上看起来良好：
   ```jsx
   export default function Hero() {
     return (
       <div className="pt-24 md:pt-32 pb-16">
         <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
           <div className="md:flex items-center">
             <div className="md:w-2/3 md:pr-8">
               {/* ... */}
               <h1 className="text-3xl sm:text-4xl md:text-5xl font-extrabold mb-4">你好，我是你的名字.<br className="hidden sm:block" />正在学习编程与开发</h1>
               <p className="text-lg sm:text-xl md:text-2xl mb-8 opacity-80">这里是你的简短介绍，描述你的背景和目标。</p>
               <div className="flex flex-wrap gap-4">
                 <Link href="/projects" className="btn btn-primary">我的项目</Link>
                 <Link href="/blog" className="btn btn-secondary">我的博客</Link>
               </div>
             </div>
             <div className="md:w-1/3 mt-8 md:mt-0 flex justify-center">
               {/* ... */}
             </div>
           </div>
         </div>
       </div>
     );
   }
   ```

## 添加动画和过渡效果

1. 为页面元素添加简单的动画效果。更新 `src/app/page.js`：
   ```jsx
   export default function Home() {
     // ...
     
     return (
       <div>
         <Navbar />
         <main>
           <section className="animate-fadeIn" style={{ animationDelay: '0s' }}>
             <Hero personalInfo={personalInfo} />
           </section>
           
           <section className="animate-fadeIn" style={{ animationDelay: '0.1s' }}>
             <Journey journey={personalInfo.journey} />
           </section>
           
           <section className="animate-fadeIn" style={{ animationDelay: '0.2s' }}>
             <Skills skills={skills} />
           </section>
           
           <section className="animate-fadeIn" style={{ animationDelay: '0.3s' }}>
             <Projects projects={featuredProjects} />
           </section>
         </main>
         <Footer personalInfo={personalInfo} />
       </div>
     );
   }
   ```

2. 为项目卡片添加悬停效果。更新 `ProjectCard.jsx`：
   ```jsx
   export default function ProjectCard({ project }) {
     return (
       <div className="card group">
         <div className="h-48 bg-gray-100 dark:bg-gray-700 flex items-center justify-center group-hover:bg-blue-50 dark:group-hover:bg-blue-900/20 transition-colors">
           <span className="text-5xl group-hover:scale-110 transition-transform">{project.emoji}</span>
         </div>
         <div className="p-6">
           {/* ... */}
           {project.link && (
             <div className="mt-4 opacity-0 group-hover:opacity-100 transition-opacity">
               <Link href={project.link} className="btn btn-primary">
                 查看项目
               </Link>
             </div>
           )}
         </div>
       </div>
     );
   }
   ```

## 添加自定义字体

1. 在 `src/app/layout.js` 中添加Google字体：
   ```jsx
   import { Inter, Poppins } from 'next/font/google';
   
   // 定义字体
   const inter = Inter({
     subsets: ['latin'],
     display: 'swap',
     variable: '--font-inter',
   });
   
   const poppins = Poppins({
     weight: ['400', '500', '600', '700'],
     subsets: ['latin'],
     display: 'swap',
     variable: '--font-poppins',
   });
   
   export default function RootLayout({ children }) {
     return (
       <html lang="zh" className={`${inter.variable} ${poppins.variable}`}>
         <body>
           <ThemeProvider>
             {children}
           </ThemeProvider>
         </body>
       </html>
     );
   }
   ```

2. 在 `tailwind.config.js` 中配置字体：
   ```javascript
   module.exports = {
     // ...
     theme: {
       extend: {
         // ...
         fontFamily: {
           sans: ['var(--font-inter)', 'system-ui', 'sans-serif'],
           heading: ['var(--font-poppins)', 'system-ui', 'sans-serif'],
         },
       },
     },
     // ...
   }
   ```

3. 在组件中使用自定义字体：
   ```jsx
   <h1 className="font-heading text-4xl font-bold">你好，我是你的名字</h1>
   ```

## 添加页面过渡动画

1. 安装 `framer-motion` 库：
   ```bash
   npm install framer-motion
   ```

2. 创建一个页面过渡组件 `src/components/PageTransition.jsx`：
   ```jsx
   'use client';
   
   import { motion } from 'framer-motion';
   
   export default function PageTransition({ children }) {
     return (
       <motion.div
         initial={{ opacity: 0, y: 20 }}
         animate={{ opacity: 1, y: 0 }}
         exit={{ opacity: 0, y: 20 }}
         transition={{ duration: 0.3 }}
       >
         {children}
       </motion.div>
     );
   }
   ```

3. 在页面中使用这个组件：
   ```jsx
   import PageTransition from '@/components/PageTransition';
   
   export default function Projects() {
     // ...
     
     return (
       <div>
         <Navbar />
         <PageTransition>
           <main className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
             {/* ... */}
           </main>
         </PageTransition>
         <Footer />
       </div>
     );
   }
   ```

完成这些步骤后，你的网站将拥有一个现代化的外观和感觉，包括响应式设计、暗黑模式、动画效果和自定义字体。
