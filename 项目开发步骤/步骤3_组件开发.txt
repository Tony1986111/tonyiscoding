# 步骤3：组件开发

## 创建导航栏组件

1. 在 `src/components` 目录下创建 `Navbar.jsx`：
   ```jsx
   'use client';
   
   import { useState } from 'react';
   import Link from 'next/link';
   import { Menu, X, Moon, Sun } from 'lucide-react';
   
   export default function Navbar() {
     const [darkMode, setDarkMode] = useState(true);
     const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
     
     const toggleDarkMode = () => setDarkMode(!darkMode);
     const toggleMobileMenu = () => setMobileMenuOpen(!mobileMenuOpen);
     
     return (
       <nav className={`fixed w-full z-10 ${darkMode ? 'bg-gray-900 text-gray-100' : 'bg-gray-50 text-gray-900'} border-b ${darkMode ? 'border-gray-800' : 'border-gray-200'}`}>
         <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
           <div className="flex justify-between h-16">
             <div className="flex items-center">
               <Link href="/" className="text-xl font-bold">你的名字.TECH</Link>
             </div>
             
             <div className="hidden md:flex items-center space-x-8">
               <Link href="/" className="hover:text-blue-500 transition">首页</Link>
               <Link href="/projects" className="hover:text-blue-500 transition">项目</Link>
               <Link href="/blog" className="hover:text-blue-500 transition">博客</Link>
               <Link href="/contact" className="hover:text-blue-500 transition">联系</Link>
               <button onClick={toggleDarkMode} className="p-2 rounded-full hover:bg-gray-800 transition">
                 {darkMode ? <Sun size={20} /> : <Moon size={20} />}
               </button>
             </div>
             
             <div className="md:hidden flex items-center">
               <button onClick={toggleDarkMode} className="p-2 mr-2 rounded-full hover:bg-gray-800 transition">
                 {darkMode ? <Sun size={20} /> : <Moon size={20} />}
               </button>
               <button onClick={toggleMobileMenu} className="p-2 rounded-full hover:bg-gray-800 transition">
                 {mobileMenuOpen ? <X size={24} /> : <Menu size={24} />}
               </button>
             </div>
           </div>
         </div>
         
         {/* 移动端菜单 */}
         {mobileMenuOpen && (
           <div className={`md:hidden ${darkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>
             <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3">
               <Link href="/" className="block px-3 py-2 rounded-md text-base font-medium hover:bg-gray-800 transition">首页</Link>
               <Link href="/projects" className="block px-3 py-2 rounded-md text-base font-medium hover:bg-gray-800 transition">项目</Link>
               <Link href="/blog" className="block px-3 py-2 rounded-md text-base font-medium hover:bg-gray-800 transition">博客</Link>
               <Link href="/contact" className="block px-3 py-2 rounded-md text-base font-medium hover:bg-gray-800 transition">联系</Link>
             </div>
           </div>
         )}
       </nav>
     );
   }
   ```

## 创建页脚组件

1. 在 `src/components` 目录下创建 `Footer.jsx`：
   ```jsx
   'use client';
   
   import { useState } from 'react';
   import { Github, Linkedin, Twitter, Mail } from 'lucide-react';
   
   export default function Footer() {
     // 使用与Navbar相同的暗黑模式状态
     // 在实际应用中，你应该使用Context或其他状态管理方案来共享这个状态
     const [darkMode, setDarkMode] = useState(true);
     
     return (
       <footer className={`${darkMode ? 'bg-gray-800 text-gray-300' : 'bg-gray-100 text-gray-600'} py-12`}>
         <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
           <div className="flex flex-col md:flex-row justify-between items-center">
             <div className="mb-4 md:mb-0">
               <span className="font-bold text-xl">你的名字.TECH</span>
               <p className="mt-2">你的个人标语</p>
             </div>
             
             <div className="flex space-x-4">
               <a href="https://github.com/你的用户名" target="_blank" rel="noopener noreferrer" className="p-2 rounded-full hover:bg-gray-700 transition">
                 <Github size={20} />
               </a>
               <a href="https://twitter.com/你的用户名" target="_blank" rel="noopener noreferrer" className="p-2 rounded-full hover:bg-gray-700 transition">
                 <Twitter size={20} />
               </a>
               <a href="https://linkedin.com/in/你的用户名" target="_blank" rel="noopener noreferrer" className="p-2 rounded-full hover:bg-gray-700 transition">
                 <Linkedin size={20} />
               </a>
               <a href="mailto:你的邮箱@example.com" className="p-2 rounded-full hover:bg-gray-700 transition">
                 <Mail size={20} />
               </a>
             </div>
           </div>
           
           <div className={`mt-8 pt-8 border-t ${darkMode ? 'border-gray-700' : 'border-gray-200'} text-center`}>
             <p>&copy; {new Date().getFullYear()} 你的名字. All rights reserved.</p>
           </div>
         </div>
       </footer>
     );
   }
   ```

## 创建首页英雄区组件

1. 在 `src/components` 目录下创建 `Hero.jsx`：
   ```jsx
   'use client';
   
   import { useState } from 'react';
   import Link from 'next/link';
   
   export default function Hero() {
     const [darkMode, setDarkMode] = useState(true);
     
     return (
       <div className="pt-32 pb-16">
         <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
           <div className="md:flex items-center">
             <div className="md:w-2/3 md:pr-8">
               <div className={`inline-block px-3 py-1 rounded-md text-sm font-medium mb-4 ${darkMode ? 'bg-blue-900 text-blue-100' : 'bg-blue-100 text-blue-800'}`}>
                 你的背景 → 你的目标职业
               </div>
               <h1 className="text-4xl md:text-5xl font-extrabold mb-4">你好，我是你的名字.<br />正在学习编程与开发</h1>
               <p className="text-xl md:text-2xl mb-8 opacity-80">这里是你的简短介绍，描述你的背景和目标。</p>
               <div className="flex space-x-4">
                 <Link href="/projects" className={`px-6 py-3 rounded-lg ${darkMode ? 'bg-blue-600 hover:bg-blue-700' : 'bg-blue-500 hover:bg-blue-600'} text-white font-medium transition`}>我的项目</Link>
                 <Link href="/blog" className={`px-6 py-3 rounded-lg ${darkMode ? 'bg-gray-800 hover:bg-gray-700' : 'bg-gray-200 hover:bg-gray-300'} font-medium transition`}>我的博客</Link>
               </div>
             </div>
             <div className="md:w-1/3 mt-8 md:mt-0 flex justify-center">
               <div className={`w-48 h-48 rounded-full ${darkMode ? 'bg-gray-800' : 'bg-gray-200'} flex items-center justify-center overflow-hidden`}>
                 {/* 这里可以放置你的头像图片 */}
                 <span className="text-6xl">👨‍💻</span>
               </div>
             </div>
           </div>
         </div>
       </div>
     );
   }
   ```

## 创建项目卡片组件

1. 在 `src/components` 目录下创建 `ProjectCard.jsx`：
   ```jsx
   'use client';
   
   import { useState } from 'react';
   import Link from 'next/link';
   
   export default function ProjectCard({ project }) {
     const [darkMode, setDarkMode] = useState(true);
     
     return (
       <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl overflow-hidden shadow-lg transition hover:scale-[1.02]`}>
         <div className={`h-48 ${darkMode ? 'bg-gray-700' : 'bg-gray-100'} flex items-center justify-center`}>
           <span className="text-5xl">{project.emoji}</span>
         </div>
         <div className="p-6">
           <div className="flex justify-between items-center mb-2">
             <h3 className="text-xl font-bold">{project.title}</h3>
             <div className={`px-2 py-1 text-xs rounded-full ${darkMode ? 'bg-blue-900 text-blue-100' : 'bg-blue-100 text-blue-800'}`}>
               {project.status}
             </div>
           </div>
           <p className={`mb-4 ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>{project.description}</p>
           <div className="flex flex-wrap gap-2">
             {project.tags.map((tag) => (
               <span key={tag} className={`px-2 py-1 text-xs rounded ${darkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>
                 {tag}
               </span>
             ))}
           </div>
           {project.link && (
             <div className="mt-4">
               <Link href={project.link} className={`inline-block px-3 py-1 rounded ${darkMode ? 'bg-blue-600 hover:bg-blue-700' : 'bg-blue-500 hover:bg-blue-600'} text-white`}>
                 查看项目
               </Link>
             </div>
           )}
         </div>
       </div>
     );
   }
   ```

## 创建博客文章卡片组件

1. 在 `src/components` 目录下创建 `BlogPostCard.jsx`：
   ```jsx
   'use client';
   
   import { useState } from 'react';
   import Link from 'next/link';
   
   export default function BlogPostCard({ post }) {
     const [darkMode, setDarkMode] = useState(true);
     
     return (
       <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl overflow-hidden shadow-lg transition hover:scale-[1.02]`}>
         <div className="p-6">
           <div className="flex justify-between items-center mb-2">
             <h3 className="text-xl font-bold">{post.title}</h3>
             <div className={`px-2 py-1 text-xs rounded-full ${darkMode ? 'bg-blue-900 text-blue-100' : 'bg-blue-100 text-blue-800'}`}>
               {post.date}
             </div>
           </div>
           <p className={`mb-4 ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>{post.excerpt}</p>
           <div className="flex flex-wrap gap-2 mb-4">
             {post.tags.map((tag) => (
               <span key={tag} className={`px-2 py-1 text-xs rounded ${darkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>
                 {tag}
               </span>
             ))}
           </div>
           <Link href={`/blog/${post.slug}`} className={`inline-block px-3 py-1 rounded ${darkMode ? 'bg-blue-600 hover:bg-blue-700' : 'bg-blue-500 hover:bg-blue-600'} text-white`}>
             阅读更多
           </Link>
         </div>
       </div>
     );
   }
   ```

## 创建暗黑模式上下文

为了在组件之间共享暗黑模式状态，创建一个Context：

1. 在 `src/context` 目录下创建 `ThemeContext.jsx`：
   ```jsx
   'use client';
   
   import { createContext, useState, useContext, useEffect } from 'react';
   
   const ThemeContext = createContext();
   
   export function ThemeProvider({ children }) {
     const [darkMode, setDarkMode] = useState(true);
     
     // 检查用户之前的偏好设置
     useEffect(() => {
       const savedTheme = localStorage.getItem('theme');
       if (savedTheme) {
         setDarkMode(savedTheme === 'dark');
       } else {
         // 检查系统偏好
         const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
         setDarkMode(prefersDark);
       }
     }, []);
     
     // 保存用户偏好设置
     useEffect(() => {
       localStorage.setItem('theme', darkMode ? 'dark' : 'light');
       // 更新HTML元素的类以应用全局样式
       if (darkMode) {
         document.documentElement.classList.add('dark');
       } else {
         document.documentElement.classList.remove('dark');
       }
     }, [darkMode]);
     
     const toggleDarkMode = () => setDarkMode(!darkMode);
     
     return (
       <ThemeContext.Provider value={{ darkMode, toggleDarkMode }}>
         {children}
       </ThemeContext.Provider>
     );
   }
   
   export function useTheme() {
     return useContext(ThemeContext);
   }
   ```

2. 在 `src/app/layout.js` 中使用这个Provider：
   ```jsx
   import { ThemeProvider } from '@/context/ThemeContext';
   import './globals.css';
   
   export const metadata = {
     title: '你的名字 | 个人网站',
     description: '展示我的IT项目和博客的个人网站',
   };
   
   export default function RootLayout({ children }) {
     return (
       <html lang="zh">
         <body>
           <ThemeProvider>
             {children}
           </ThemeProvider>
         </body>
       </html>
     );
   }
   ```

3. 然后在各个组件中使用 `useTheme` hook 替代本地的 `useState`：
   ```jsx
   import { useTheme } from '@/context/ThemeContext';
   
   export default function Navbar() {
     const { darkMode, toggleDarkMode } = useTheme();
     // ...
   }
   ```

完成这些步骤后，你将拥有一套可复用的组件，并且暗黑模式状态将在整个应用中共享。
