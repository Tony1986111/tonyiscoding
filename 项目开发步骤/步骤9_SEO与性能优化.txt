# 步骤9：SEO与性能优化

## 基础SEO优化

1. 更新 `src/app/layout.js` 文件，添加基础元数据：
   ```jsx
   import { Inter, Poppins } from 'next/font/google';
   import { ThemeProvider } from '@/context/ThemeContext';
   import './globals.css';
   
   // 定义字体
   const inter = Inter({
     subsets: ['latin'],
     display: 'swap',
     variable: '--font-inter',
   });
   
   const poppins = Poppins({
     weight: ['400', '500', '600', '700'],
     subsets: ['latin'],
     display: 'swap',
     variable: '--font-poppins',
   });
   
   export const metadata = {
     title: {
       default: '你的名字 | 个人网站',
       template: '%s | 你的名字'
     },
     description: '你的个人网站，展示IT项目、博客和技能。',
     keywords: ['前端开发', 'React', 'Next.js', '个人网站', '博客', '项目展示'],
     authors: [{ name: '你的名字', url: 'https://你的域名.com' }],
     creator: '你的名字',
     publisher: '你的名字',
     formatDetection: {
       email: false,
       address: false,
       telephone: false,
     },
     metadataBase: new URL('https://你的域名.com'),
     alternates: {
       canonical: '/',
     },
     openGraph: {
       title: '你的名字 | 个人网站',
       description: '你的个人网站，展示IT项目、博客和技能。',
       url: 'https://你的域名.com',
       siteName: '你的名字',
       images: [
         {
           url: 'https://你的域名.com/og-image.jpg',
           width: 1200,
           height: 630,
           alt: '你的名字 - 个人网站',
         },
       ],
       locale: 'zh_CN',
       type: 'website',
     },
     twitter: {
       card: 'summary_large_image',
       title: '你的名字 | 个人网站',
       description: '你的个人网站，展示IT项目、博客和技能。',
       creator: '@你的Twitter用户名',
       images: ['https://你的域名.com/twitter-image.jpg'],
     },
     robots: {
       index: true,
       follow: true,
       googleBot: {
         index: true,
         follow: true,
         'max-video-preview': -1,
         'max-image-preview': 'large',
         'max-snippet': -1,
       },
     },
   };
   
   export default function RootLayout({ children }) {
     return (
       <html lang="zh" className={`${inter.variable} ${poppins.variable}`}>
         <body>
           <ThemeProvider>
             {children}
           </ThemeProvider>
         </body>
       </html>
     );
   }
   ```

2. 为每个页面创建特定的元数据。例如，在 `src/app/blog/page.js` 中：
   ```jsx
   export const metadata = {
     title: '博客',
     description: '阅读我关于编程、技术和个人发展的文章。',
     openGraph: {
       title: '博客 | 你的名字',
       description: '阅读我关于编程、技术和个人发展的文章。',
     },
   };
   ```

3. 为动态路由页面创建动态元数据。例如，在 `src/app/blog/[slug]/page.js` 中：
   ```jsx
   export async function generateMetadata({ params }) {
     const { slug } = params;
     const post = await getPostData(slug);
     
     return {
       title: post.title,
       description: post.excerpt,
       openGraph: {
         title: `${post.title} | 你的名字`,
         description: post.excerpt,
         type: 'article',
         publishedTime: post.date,
         authors: ['你的名字'],
         tags: post.tags,
       },
     };
   }
   ```

## 创建JSON-LD结构化数据

1. 创建 `src/components/JsonLd.jsx` 组件：
   ```jsx
   export default function JsonLd({ data }) {
     return (
       <script
         type="application/ld+json"
         dangerouslySetInnerHTML={{ __html: JSON.stringify(data) }}
       />
     );
   }
   ```

2. 在主页添加结构化数据。在 `src/app/page.js` 中：
   ```jsx
   import JsonLd from '@/components/JsonLd';
   
   export default function Home() {
     // ...
     
     const jsonLd = {
       '@context': 'https://schema.org',
       '@type': 'Person',
       name: '你的名字',
       url: 'https://你的域名.com',
       jobTitle: '前端开发者',
       sameAs: [
         'https://github.com/你的用户名',
         'https://linkedin.com/in/你的用户名',
         'https://twitter.com/你的用户名'
       ],
       image: 'https://你的域名.com/profile.jpg',
       description: '你的个人简介',
       knowsAbout: ['JavaScript', 'React', 'Next.js', 'Web开发'],
     };
     
     return (
       <>
         <JsonLd data={jsonLd} />
         <div>
           {/* 页面内容 */}
         </div>
       </>
     );
   }
   ```

3. 在博客文章页面添加结构化数据。在 `src/app/blog/[slug]/page.js` 中：
   ```jsx
   import JsonLd from '@/components/JsonLd';
   
   export default async function BlogPost({ params }) {
     // ...
     
     const jsonLd = {
       '@context': 'https://schema.org',
       '@type': 'BlogPosting',
       headline: post.title,
       description: post.excerpt,
       image: post.coverImage || 'https://你的域名.com/blog-default.jpg',
       datePublished: post.date,
       dateModified: post.lastModified || post.date,
       author: {
         '@type': 'Person',
         name: '你的名字',
         url: 'https://你的域名.com',
       },
       publisher: {
         '@type': 'Person',
         name: '你的名字',
         url: 'https://你的域名.com',
       },
       mainEntityOfPage: {
         '@type': 'WebPage',
         '@id': `https://你的域名.com/blog/${post.slug}`,
       },
       keywords: post.tags.join(', '),
     };
     
     return (
       <>
         <JsonLd data={jsonLd} />
         <div>
           {/* 页面内容 */}
         </div>
       </>
     );
   }
   ```

## 图片优化

1. 使用Next.js的Image组件优化图片。更新 `src/components/ProjectCard.jsx`：
   ```jsx
   import Image from 'next/image';
   
   export default function ProjectCard({ project }) {
     // ...
     
     return (
       <div className="card group">
         <div className="h-48 relative overflow-hidden">
           {project.coverImage ? (
             <Image
               src={project.coverImage}
               alt={project.title}
               fill
               sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
               className="object-cover group-hover:scale-105 transition-transform"
             />
           ) : (
             <div className="h-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center">
               <span className="text-5xl">{project.emoji}</span>
             </div>
           )}
         </div>
         {/* 其他内容 */}
       </div>
     );
   }
   ```

2. 为博客文章添加封面图片。更新 `src/components/BlogPostCard.jsx`：
   ```jsx
   import Image from 'next/image';
   
   export default function BlogPostCard({ post }) {
     // ...
     
     return (
       <div className="card group">
         {post.coverImage && (
           <div className="h-48 relative overflow-hidden">
             <Image
               src={post.coverImage}
               alt={post.title}
               fill
               sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
               className="object-cover group-hover:scale-105 transition-transform"
             />
           </div>
         )}
         {/* 其他内容 */}
       </div>
     );
   }
   ```

3. 创建图片占位符组件。创建 `src/components/BlurImage.jsx`：
   ```jsx
   'use client';
   
   import { useState } from 'react';
   import Image from 'next/image';
   
   export default function BlurImage({ src, alt, ...props }) {
     const [isLoading, setLoading] = useState(true);
     
     return (
       <div className={`relative overflow-hidden ${props.className || ''}`}>
         <Image
           src={src}
           alt={alt}
           {...props}
           className={`
             duration-700 ease-in-out
             ${isLoading ? 'scale-110 blur-sm' : 'scale-100 blur-0'}
             ${props.objectFit || 'object-cover'}
           `}
           onLoadingComplete={() => setLoading(false)}
         />
       </div>
     );
   }
   ```

## 性能优化

1. 添加字体预加载。在 `src/app/layout.js` 中：
   ```jsx
   import { Inter, Poppins } from 'next/font/google';
   
   const inter = Inter({
     subsets: ['latin'],
     display: 'swap',
     preload: true,
     variable: '--font-inter',
   });
   
   const poppins = Poppins({
     weight: ['400', '500', '600', '700'],
     subsets: ['latin'],
     display: 'swap',
     preload: true,
     variable: '--font-poppins',
   });
   ```

2. 使用动态导入减小初始包大小。例如，对于评论组件：
   ```jsx
   import dynamic from 'next/dynamic';
   
   // 动态导入评论组件
   const Comments = dynamic(() => import('@/components/Comments'), {
     loading: () => <p>加载评论...</p>,
     ssr: false, // 如果组件依赖于浏览器API，设置为false
   });
   ```

3. 添加预连接和DNS预取。在 `src/app/layout.js` 中：
   ```jsx
   export default function RootLayout({ children }) {
     return (
       <html lang="zh" className={`${inter.variable} ${poppins.variable}`}>
         <head>
           {/* 预连接到常用的第三方域名 */}
           <link rel="preconnect" href="https://fonts.googleapis.com" />
           <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
           
           {/* DNS预取 */}
           <link rel="dns-prefetch" href="https://你使用的API域名.com" />
         </head>
         <body>
           <ThemeProvider>
             {children}
           </ThemeProvider>
         </body>
       </html>
     );
   }
   ```

4. 使用React.memo优化组件渲染。例如，对于ProjectCard组件：
   ```jsx
   import { memo } from 'react';
   
   function ProjectCard({ project }) {
     // 组件实现...
   }
   
   export default memo(ProjectCard);
   ```

5. 添加Suspense和错误边界。在 `src/app/page.js` 中：
   ```jsx
   import { Suspense } from 'react';
   import Loading from './loading';
   import ErrorBoundary from '@/components/ErrorBoundary';
   
   export default function Home() {
     return (
       <div>
         <Navbar />
         <main>
           <Hero />
           
           <ErrorBoundary fallback={<div>加载项目时出错</div>}>
             <Suspense fallback={<Loading />}>
               <Projects />
             </Suspense>
           </ErrorBoundary>
           
           <ErrorBoundary fallback={<div>加载博客时出错</div>}>
             <Suspense fallback={<Loading />}>
               <BlogPosts />
             </Suspense>
           </ErrorBoundary>
         </main>
         <Footer />
       </div>
     );
   }
   ```

6. 创建 `src/components/ErrorBoundary.jsx`：
   ```jsx
   'use client';
   
   import { Component } from 'react';
   
   export default class ErrorBoundary extends Component {
     constructor(props) {
       super(props);
       this.state = { hasError: false };
     }
     
     static getDerivedStateFromError(error) {
       return { hasError: true };
     }
     
     componentDidCatch(error, errorInfo) {
       console.error('ErrorBoundary caught an error:', error, errorInfo);
     }
     
     render() {
       if (this.state.hasError) {
         return this.props.fallback;
       }
       
       return this.props.children;
     }
   }
   ```

7. 创建 `src/app/loading.jsx`：
   ```jsx
   export default function Loading() {
     return (
       <div className="flex justify-center items-center py-16">
         <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
       </div>
     );
   }
   ```

## 添加网站分析

1. 安装Google Analytics：
   ```bash
   npm install react-ga4
   ```

2. 创建 `src/lib/analytics.js` 文件：
   ```javascript
   import ReactGA from 'react-ga4';

   export const initGA = () => {
     if (typeof window !== 'undefined' && !window.GA_INITIALIZED) {
       ReactGA.initialize(process.env.NEXT_PUBLIC_GA_ID);
       window.GA_INITIALIZED = true;
     }
   };

   export const logPageView = () => {
     ReactGA.send({ hitType: 'pageview', page: window.location.pathname });
   };

   export const logEvent = (category, action, label) => {
     ReactGA.event({
       category,
       action,
       label,
     });
   };
   ```

3. 创建 `src/components/Analytics.jsx` 组件：
   ```jsx
   'use client';
   
   import { useEffect } from 'react';
   import { usePathname, useSearchParams } from 'next/navigation';
   import { initGA, logPageView } from '@/lib/analytics';
   
   export default function Analytics() {
     const pathname = usePathname();
     const searchParams = useSearchParams();
     
     useEffect(() => {
       initGA();
     }, []);
     
     useEffect(() => {
       if (pathname) {
         logPageView();
       }
     }, [pathname, searchParams]);
     
     return null;
   }
   ```

4. 在 `src/app/layout.js` 中添加分析组件：
   ```jsx
   import Analytics from '@/components/Analytics';
   
   export default function RootLayout({ children }) {
     return (
       <html lang="zh">
         <body>
           <ThemeProvider>
             {children}
           </ThemeProvider>
           <Analytics />
         </body>
       </html>
     );
   }
   ```

## 添加网站地图生成

1. 安装网站地图生成工具：
   ```bash
   npm install next-sitemap
   ```

2. 创建 `next-sitemap.config.js` 文件：
   ```javascript
   /** @type {import('next-sitemap').IConfig} */
   module.exports = {
     siteUrl: process.env.NEXT_PUBLIC_SITE_URL || 'https://你的域名.com',
     generateRobotsTxt: true,
     robotsTxtOptions: {
       additionalSitemaps: [
         `${process.env.NEXT_PUBLIC_SITE_URL || 'https://你的域名.com'}/sitemap.xml`,
       ],
     },
     exclude: ['/api/*', '/admin/*'],
   };
   ```

3. 在 `package.json` 中添加脚本：
   ```json
   "scripts": {
     "dev": "next dev",
     "build": "next build",
     "postbuild": "next-sitemap",
     "start": "next start",
     "lint": "next lint"
   }
   ```

完成这些步骤后，你的网站将拥有良好的SEO优化和性能表现，包括元数据、结构化数据、图片优化、性能优化和分析功能。
