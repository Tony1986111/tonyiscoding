# Step 4: Data Management

/*
Completed work:
1. Created data directory structure for projects, blog posts, and other data
2. Created sample project data files using Markdown format
3. Created sample blog post data files using Markdown format
4. Created skills data file with sample skills
5. Created personal information data file
6. Updated components to use the data files
7. Ensured all text content is in English
*/

## Creating Project Data

1. Created `src/data/projects/index.js` file:
   ```javascript
   import fs from 'fs';
   import path from 'path';
   import matter from 'gray-matter';

   const projectsDirectory = path.join(process.cwd(), 'src/data/projects');

   export function getSortedProjectsData() {
     // Get file names under /projects
     const fileNames = fs.readdirSync(projectsDirectory).filter(fileName => 
       fileName.endsWith('.md') || fileName.endsWith('.mdx')
     );
     
     const allProjectsData = fileNames.map((fileName) => {
       // Remove ".md" or ".mdx" from file name to get id
       const id = fileName.replace(/\.(md|mdx)$/, '');

       // Read markdown file as string
       const fullPath = path.join(projectsDirectory, fileName);
       const fileContents = fs.readFileSync(fullPath, 'utf8');

       // Use gray-matter to parse the project metadata section
       const matterResult = matter(fileContents);

       // Combine the data with the id
       return {
         id,
         ...matterResult.data,
       };
     });

     // Sort projects by date
     return allProjectsData.sort((a, b) => {
       if (a.date < b.date) {
         return 1;
       } else {
         return -1;
       }
     });
   }

   export function getAllProjectIds() {
     const fileNames = fs.readdirSync(projectsDirectory).filter(fileName => 
       fileName.endsWith('.md') || fileName.endsWith('.mdx')
     );
     
     return fileNames.map((fileName) => {
       return {
         params: {
           id: fileName.replace(/\.(md|mdx)$/, ''),
         },
       };
     });
   }

   export async function getProjectData(id) {
     let fullPath = path.join(projectsDirectory, `${id}.md`);
     
     // Check if .md file exists, if not try .mdx
     if (!fs.existsSync(fullPath)) {
       fullPath = path.join(projectsDirectory, `${id}.mdx`);
     }
     
     const fileContents = fs.readFileSync(fullPath, 'utf8');

     // Use gray-matter to parse the project metadata section
     const matterResult = matter(fileContents);

     // Combine the data with the id and content
     return {
       id,
       content: matterResult.content,
       ...matterResult.data,
     };
   }

   export function getFeaturedProjects() {
     const allProjects = getSortedProjectsData();
     return allProjects.filter(project => project.featured);
   }
   ```

2. Created sample project files in Markdown format:
   - `src/data/projects/personal-website.md`
   - `src/data/projects/todo-app.md`

## Creating Blog Data

1. Created `src/data/blog.js` file:
   ```javascript
   import fs from 'fs';
   import path from 'path';
   import matter from 'gray-matter';

   const postsDirectory = path.join(process.cwd(), 'src/data/posts');

   export function getSortedPostsData() {
     // Get file names under /posts
     const fileNames = fs.readdirSync(postsDirectory);
     const allPostsData = fileNames.map((fileName) => {
       // Remove ".md" from file name to get id
       const id = fileName.replace(/\.md$/, '');

       // Read markdown file as string
       const fullPath = path.join(postsDirectory, fileName);
       const fileContents = fs.readFileSync(fullPath, 'utf8');

       // Use gray-matter to parse the post metadata section
       const matterResult = matter(fileContents);

       // Combine the data with the id
       return {
         id,
         ...matterResult.data,
       };
     });

     // Sort posts by date
     return allPostsData.sort((a, b) => {
       if (a.date < b.date) {
         return 1;
       } else {
         return -1;
       }
     });
   }

   export function getAllPostIds() {
     const fileNames = fs.readdirSync(postsDirectory);
     return fileNames.map((fileName) => {
       return {
         params: {
           slug: fileName.replace(/\.md$/, ''),
         },
       };
     });
   }

   export async function getPostData(slug) {
     const fullPath = path.join(postsDirectory, `${slug}.md`);
     const fileContents = fs.readFileSync(fullPath, 'utf8');

     // Use gray-matter to parse the post metadata section
     const matterResult = matter(fileContents);

     // Return the data
     return {
       slug,
       content: matterResult.content,
       ...matterResult.data,
     };
   }

   export function getFeaturedPosts() {
     const allPosts = getSortedPostsData();
     return allPosts.filter(post => post.featured);
   }
   ```

2. Created sample blog post files in Markdown format:
   - `src/data/posts/my-programming-journey.md`
   - `src/data/posts/react-basics.md`

## Creating Skills Data

1. Created `src/data/skills.js` file:
   ```javascript
   export const skills = [
     { name: 'JavaScript', level: 'Intermediate', icon: '🚀' },
     { name: 'React', level: 'Beginner', icon: '⚛️' },
     { name: 'Next.js', level: 'Learning', icon: '📱' },
     { name: 'Node.js', level: 'Beginner', icon: '🔧' },
     { name: 'HTML/CSS', level: 'Intermediate', icon: '🎨' },
     { name: 'Git', level: 'Beginner', icon: '📂' },
     { name: 'Tailwind CSS', level: 'Beginner', icon: '💨' },
     { name: 'Databases', level: 'Learning', icon: '🗄️' }
   ];

   export function getAllSkills() {
     return skills;
   }
   ```

## Creating Personal Information Data

1. Created `src/data/personal.js` file:
   ```javascript
   export const personalInfo = {
     name: 'Tony Wang',
     title: 'Frontend Developer Learner',
     email: 'your.email@example.com',
     github: 'https://github.com/yourusername',
     twitter: 'https://twitter.com/yourusername',
     linkedin: 'https://linkedin.com/in/yourusername',
     bio: 'I am a learner transitioning to the IT industry, currently focusing on frontend development technologies.',
     longBio: `
       I have a background in [your original field], and now I'm learning web development and programming.
       
       I'm passionate about technology and believe that through continuous learning and practice, I can succeed in the IT industry.
       
       My goal is to become a full-stack developer, capable of independently building and deploying web applications.
     `,
     journey: [
       {
         period: '2020 - 2022',
         title: 'IT Enthusiast',
         description: 'Developed an interest in programming and self-learned the basics, including HTML, CSS, and JavaScript.'
       },
       {
         period: '2023',
         title: 'Programming Fundamentals',
         description: 'Systematically learned web development basics. Completed online courses in HTML, CSS, JavaScript, and React fundamentals.'
       },
       {
         period: '2024 - Present',
         title: 'Full Stack Development',
         description: 'Diving deeper into React and Next.js, building personal projects. Also learning backend technologies like Node.js and databases.'
       }
     ]
   };

   export function getPersonalInfo() {
     return personalInfo;
   }
   ```

## Using Data in Components

1. Updated components to use the data files:
   - Updated `Hero.jsx` to use personal information
   - Updated `Footer.jsx` to use personal information
   - Updated `Navbar.jsx` to use personal information
   - Updated `page.js` to use skills and journey data

2. Created a data-driven approach for the website, making it easier to update content without changing component code.

After completing these steps, you will have a data-driven website where content is separated from presentation, making it easier to maintain and update.
